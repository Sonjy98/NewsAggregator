name: Build & Deploy (Docker Hub + VM)

on:
  push:
    branches: ['main']
    paths:
      - 'NewsFeedBackend/**'
      - 'vite-project/**'
      - '.github/workflows/**'
  workflow_dispatch: {}

concurrency:
  group: newsfeed-deploy
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DH_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DH_USER }}
          password: ${{ env.DH_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: NewsFeedBackend
          file: NewsFeedBackend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.DH_USER }}/newsfeed-backend:latest
            ${{ env.DH_USER }}/newsfeed-backend:${{ github.sha }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: vite-project
          file: vite-project/Dockerfile
          push: true
          platforms: linux/amd64
          build-args: |
            VITE_API_BASE=/api
          tags: |
            ${{ env.DH_USER }}/newsfeed-frontend:latest
            ${{ env.DH_USER }}/newsfeed-frontend:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      GCE_INSTANCE: ${{ secrets.GCE_INSTANCE }}
      GCE_ZONE: ${{ secrets.GCE_ZONE }}
      OS_LOGIN_USERNAME: ${{ secrets.OS_LOGIN_USERNAME }}
    steps:
      - name: Authenticate to Google Cloud (Service Account JSON)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT }}

      - name: Create short-lived OS Login key
        id: oslogin_key
        run: |
          set -euo pipefail
          ssh-keygen -t ed25519 -N "" -f ./oslogin_key -C "gha@$(date -u +%FT%TZ)"
          gcloud compute os-login ssh-keys add --key-file=./oslogin_key.pub --ttl=30m
          USERNAME="${OS_LOGIN_USERNAME}"
          if [ -z "$USERNAME" ]; then
            USERNAME=$(gcloud compute os-login describe-profile --format='value(posixAccounts[0].username)')
          fi
          if [ -z "$USERNAME" ]; then
            echo "ERROR: No OS Login POSIX account found. Ensure roles and enable-oslogin." >&2
            exit 1
          fi
          echo "username=$USERNAME" >> "$GITHUB_OUTPUT"

      - name: Deploy via gcloud compute ssh (OS Login)
        env:
          INSTANCE: ${{ env.GCE_INSTANCE }}
          ZONE: ${{ env.GCE_ZONE }}
          USERNAME: ${{ steps.oslogin_key.outputs.username }}
          APP_DIR: /home/youdnevergrazz/apps/newsfeed
        run: |
          set -euo pipefail
          gcloud compute ssh "${USERNAME}@${INSTANCE}" \
            --zone "${ZONE}" \
            --ssh-key-file ./oslogin_key \
            --command '
              set -e
              if [ ! -d '${APP_DIR}' ]; then
                echo 'ERROR: ${APP_DIR} not found'; ls -la /home; exit 1
              fi
              cd '${APP_DIR}'
              sudo docker compose pull
              sudo docker compose up -d
              sudo docker image prune -f
              curl -fsS http://localhost/ >/dev/null
            '

      - name: Cleanup OS Login key
        if: always()
        run: |
          set -euo pipefail
          if [ -f ./oslogin_key.pub ]; then
            PUB="$(cat ./oslogin_key.pub)"
            gcloud compute os-login ssh-keys remove --key "$PUB" || true
            rm -f ./oslogin_key ./oslogin_key.pub
          fi
